#define F_CPU 8000000UL
#include <avr/io.h>
#include <LabBoard.h>
#include <stdio.h>
#include <util/delay.h>

//defining the buttons as active low
#define up !(PINA & (1<<3))
#define down !(PINA & (1<<5))
#define right !(PINA & (1<<4))
#define select !(PINA & (1<<6))
#define left !(PINA & (1<<7))


//function prototype
void setup (void);
void mainMenu(void);
char showCP(char cp);
char lamp(void);
char motor (void);
char speaker (void);
char ledmenu (void);
char ledcursor (void);
void changeAamps (clp);

//global variables
int cp,clp;
signed char curposition;            				//signed char -127 to 126
int curledposition;
int Redamp = 0;
int Greenamp = 0;
int Blueamp = 0;


int main(void)
{
	
	setup();                    				// calling the setup function
	
	while (1)
	{
		mainMenu();             			// calling the mainMenu function
		RGBDisable(RGB_RED| RGB_BLUE|RGB_GREEN);	// disabling the LEDs
	}
}

void mainMenu(void)
{
	
	char line0[20], line1[20], line2[20], line3[20]; 	// creating an array 
	
	_delay_ms (100);
	SLCDTurnOffBlinkingCursor();				// making sure the blinker is off initially
	
	// printing out the menu on the screen
	sprintf(line0,"1) Motor");				
	SLCDSetCursorPosition(0,0);
	SLCDWriteString(line0);

	sprintf(line1,"2) Lamp");
	SLCDSetCursorPosition(1,0);
	SLCDWriteString(line1);

	sprintf(line2,"3) Speaker");
	SLCDSetCursorPosition(2,0);
	SLCDWriteString(line2);

	sprintf(line3,"4) RGB LED");
	SLCDSetCursorPosition(3,0);
	SLCDWriteString(line3);
	
	SLCDSetCursorPosition(curposition, 2); 			// setting the cursor position depending on curposition
	SLCDTurnOnBlinkingCursor();				// turn on the blinking cursor at position curposition
	
	if(up)							// decrease the cursor position if up button is pressed
	{
		curposition--;
		_delay_ms(150);
		cp = curposition;
		if (curposition < 0)				// roll the cursor over to the bottom from the top
		{
			curposition = 3;
		}
		
	}
	else if(down)						// increasing the cursor position when the down button is pressed
	{
		curposition++;
		_delay_ms(150);
		cp = curposition;
		
		if (curposition == 4)				// roll the cursor over to top from the bottom
		{
			curposition = 0;
		}
	}
	
	if(select||right)					// if the user selects a certain menu 
	{
		if(cp == 0)					// if the cp position is 0 when selected then go to the motor function
		{
			motor();
		}
		else if(cp == 1)				// if the cp position is 1 when selected then go to the lamp function
		{
			lamp();
		}
		else if(cp == 2)				// if the cp position is 2 when selected then go to the speaker function
		{
			speaker();
		}
		else						// if the cp position is 4 when selected then go to the ledmenu function
		{
			ledmenu();
		}
		
	}
}

// motor function 
char motor(void)
{
	int speed = 0;						// the initial speed of motor is zero
	SLCDClearScreen();					// clear the top menu
	SLCDTurnOffBlinkingCursor();				// turn off the blinking cursor which was on in the top menu
	while (!left)						// while the left button is not pressed do the following
	{
		char line0[20], line1[20];
		sprintf(line0,"Motor Speed"); 			// print the title on the position (0,0)
		SLCDSetCursorPosition(0,0);	
		SLCDWriteString(line0);
		
		if (up) 					// if the up button is pressed increase the speed by 1%
		{
			speed++;
			_delay_ms(100); 			
			if (speed > 100)
			{
				speed = 100;			// ensures the speed does not exceed 100 
			}
		}
		
		else if (down)					// if the down button is pressed decrease the speed by 1%
		{
			speed--;
			_delay_ms(100);
			if (speed <0)
			{
				speed = 0;			// ensures the lowest speed is 0 
			}
			
		}
		OCR1A = speed/2; 				// updating the motor speed by defining OCR1A
		sprintf(line1,"%2i%%", speed);			// printing the speed on line 1
		SLCDSetCursorPosition(1,1);			// setting the cursor position
		SLCDWriteString(line1);
	}
	SLCDClearScreen();					// clears the screen when the left button is pressed before top menu printing
	
}

// lamp function
char lamp(void)   
{
	int intensity = 0;					// ensuring the lamp is off initially
	SLCDClearScreen();					// ensuring the screen is cleared 
	SLCDTurnOffBlinkingCursor();				// ensures the blinker is off
	while (!left)						// until left button is pressed do the following
	{
		char line0[20], line1[20];
		sprintf(line0,"Lamp Brightness");		// print the title 
		SLCDSetCursorPosition(0,0);
		SLCDWriteString(line0);
		if (up)						// increase the lamp brightness by 1% when up is pressed each time
		{
			intensity++;
			_delay_ms(100);
			if (intensity > 100)			// ensures that the maximum intensity reached is 100
			{
				intensity = 100;
			}
		}
		
		else if (down)					// decrease the lamp brightness by 1% when down is pressed each time
		{
			intensity--;
			_delay_ms(100);
			if (intensity <0)			// ensures that the minimum intensity is 0
			{
				intensity = 0;
			}
			
		}
		OCR1B = intensity/2;  				// updating the lamp intensity by defining OCR1B
		sprintf(line1,"%2i%%", intensity);		// printing the lamp intensity
		SLCDSetCursorPosition(1,1);
		SLCDWriteString(line1);
	}
	SLCDClearScreen();
}

// speaker function
char speaker (void)
{
	int frequency = 0;					// ensures the speaker is off initially 
	SLCDClearScreen();
	SLCDTurnOffBlinkingCursor();
	while (!left)						// do the following until the left button is pressed 
	{
		char line0[20], line1[20];
		sprintf(line0,"Speaker Frequency");
		SLCDSetCursorPosition(0,0);
		SLCDWriteString(line0);
		
		if (up)						// increase the frequency if up is pressed
		{
			frequency++;
			_delay_ms(100);
			if (frequency >25)
			{
				frequency = 25;			// ensures frequency does not exceed 25
			}
		}
		
		else if (down)					// decrease the frequency if down is pressed
		{
			frequency--;
			_delay_ms(100);
			if (frequency < 0)
			{
				frequency = 0;			// ensures frequency does not exceed 25
			}
			
		}
		OCR2A = 500/frequency; 				// updating the speaker by defining OCR2A
		sprintf(line1,"%2ikHz", frequency);		// print the frequency
		SLCDSetCursorPosition(1,1);
		SLCDWriteString(line1);
	}
	SLCDClearScreen();
}

// led menu function
char ledmenu (void)
{
	SLCDClearScreen();
	SLCDTurnOffBlinkingCursor();
	char line0[20], line1[20], line2[20], line3[20];
	
	while (!left)						// while left is not pressed display the RGB menu 
	{
		curledposition = 1;
		sprintf(line0,"RGB LED Control");
		SLCDSetCursorPosition(0,0);
		SLCDWriteString(line0);
		
		sprintf(line1,"1) Set Red mA");
		SLCDSetCursorPosition(1,0);
		SLCDWriteString(line1);
		
		sprintf(line2,"2) Set Green mA");
		SLCDSetCursorPosition(2,0);
		SLCDWriteString(line2);
		
		sprintf(line3,"3) Set Blue mA");
		SLCDSetCursorPosition(3,0);
		SLCDWriteString(line3);
		
		ledcursor();
		
	}
	
	SLCDClearScreen();					// if left pressed, before the top menu is displayed, clear the screen
}

// led cursor function
char ledcursor (void)
{
	char line0[20],line1[20],line2[20];
	curledposition = 1;					// ensures the intial position is 1 not 0
	clp = 1;
	SLCDSetCursorPosition(curledposition, 2);
	SLCDTurnOnBlinkingCursor();				// turn on the blinking cursor in the position defined by curledposition
	
	while (!left)						// while the left button is not pressed update the curledposition
	{
		if(up)
		{
			if (curledposition == 1)		// ensures the cursor rolls to bottom from the top
			{
				curledposition = 3;
				_delay_ms(150);
			}
			else
			{
				curledposition--;		// decreasing the cursor position when up is pressed
				_delay_ms(150);
				clp = curledposition;		// update the clp value with the position of the cursor
			}
			
		}
		if(down)
		{
			
			if (curledposition > 3)			// ensures the cursor rolls to top from the bottom
			{
				curledposition = 1;
				_delay_ms(150);
			}
			else
			{
				curledposition++;		// increasing the cursor position when down is pressed
				_delay_ms(150);
				clp = curledposition;
			}
			
		}
		
		clp = curledposition;				// update the clp position 
		changeAamps(clp);				// change the current of the chosen led, which is dependent on the positon of the cursor, clp
		
		SLCDSetCursorPosition(curledposition, 2);
	}
	
}

// function to change the current of the leds
void changeAamps (clp)
{
	char line0[20],line1[20],line2[20];
	RGBEnable(RGB_RED|RGB_BLUE|RGB_GREEN); 			// enabling the LEDs
	RGBWriteRedCurrent(Redamp);				// changing the current for red led
	RGBWriteGreenCurrent(Greenamp);				// changing the current for green led
	RGBWriteBlueCurrent(Blueamp);				// changing the current for blue led
	
	if(select||right)					// is a option is selected
	{
		if(clp == 1)					// check is the cursor was on 1 when selected
		{
			
			SLCDClearScreen();
			SLCDTurnOffBlinkingCursor();
			sprintf(line0,"RGB Red LED");
			SLCDSetCursorPosition(0,0);
			SLCDWriteString(line0);
			
			
			while (1)				// change the red current 
			{
				if (up && Redamp <= 31)		// ensure the current does not exceed 31
				{
					_delay_ms(200);
					Redamp++;		// increase the current is up was pressed
					RGBWriteRedCurrent(Redamp);	// update the red current for changing the brighness of red
				}
				else if (down && Redamp > 0)
				{
					_delay_ms(200);
					Redamp--;
					RGBWriteRedCurrent(Redamp);
				}
				
				sprintf(line1,"%2imA",(Redamp));
				SLCDSetCursorPosition(1,0); 	// display the current 
				SLCDWriteString(line1);
				
				if (left)			// if left button is pressed go back to the led menu
				{
					ledmenu();
				}
				
			}
		}
		else if(clp == 2)				// check if the position was 2 and hence change the current of green
		{
			SLCDClearScreen();
			SLCDTurnOffBlinkingCursor();
			sprintf(line0,"RGB Green LED");
			SLCDSetCursorPosition(0,0);
			SLCDWriteString(line0);
			
			while (1)
			{
				if (up && Greenamp <= 31)
				{
					_delay_ms(200);
					Greenamp++;
					RGBWriteGreenCurrent(Greenamp);
				}
				else if (down && Greenamp > 0)
				{
					_delay_ms(200);
					Greenamp--;
					RGBWriteGreenCurrent(Greenamp);
				}
				
				sprintf(line1,"%2imA",(Greenamp));
				SLCDSetCursorPosition(1,0); 
				SLCDWriteString(line1);
				
				if (left)
				{
					ledmenu();
				}
			}
		}
		else							// else change the current of blue led
		{
			SLCDClearScreen();
			SLCDTurnOffBlinkingCursor();
			sprintf(line0,"RGB Blue LED");
			SLCDSetCursorPosition(0,0);
			SLCDWriteString(line0);
			
			while (1)
			{
				if (up && Blueamp <= 31)
				{
					_delay_ms(200);
					Blueamp++;
					RGBWriteBlueCurrent(Blueamp);
				}
				else if (down && Blueamp > 0)
				{
					_delay_ms(200);
					Blueamp--;
					RGBWriteBlueCurrent(Blueamp);
				}
				
				sprintf(line1,"%2imA",(Blueamp));
				SLCDSetCursorPosition(1,0); // writing a string variable to the display
				SLCDWriteString(line1);
				
				if (left)
				{
					ledmenu();
				}
			}
		}
		
	}
	
}


// setup function
void setup (void)
{
	SLCDInit();         				// Initialize the LCD.
	SLCDDisplayOn();    				// Switched On the LCD.
	SLCDClearScreen();				// clear the LCD
	DDRA = 0x00;					// setting PORTA as input
	DDRC = 0xFF;					// setting PORTC as output
	DDRE= 0x03;					// setting the buttons
	PORTE = 0x01; 					
	
	//16 bit timer for motor and lamp
	TCCR1A = 0b10100010; 				// setting channel A (motor) and channel B (lamp) to clear on compare match, set on top (ICR) and fast PWM
	TCCR1B = 0b00011010;   				// fast PWM, prescaler 8
	
	DDRB = 0b01110000; 				// bit 6,5,4 turned on to turn on the motor (5),lamp (6) and speaker (4)
	ICR1 = 49;					// settin the top value
	
	// 8 bit timer for speaker
	TCCR2A = 0b01000010; 				//running on CTC mode and toggle on compare match
	TCCR2B = 0b00000010; 				// 8 prescaler
	
	PORTB = 0b01010000; 				// speaker
	
	DDRD = 0b00000010; 				// set up the LEDs
}
